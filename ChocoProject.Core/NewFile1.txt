    public void BuyerChooseAnArticleToList(Article newArticle, Buyer newBuyer, string reference, int quantity)
    {
        // Read the current content of the file =>
        string jsonFile = _fileRead.ReadFile(_pathArticleJson);
        // Choisir un article de la liste =>
        List<Article>? articles = JsonSerializer.Deserialize<List<Article>>(jsonFile);
        // Sauvegarder le fichier =>
        string path = $"/Users/thomas/Documents/RPI/2023-2025/DEV/Choco/ChocoModels/{newBuyer.Firstname}-{DateTime.Now.Day}-{DateTime.Now.Month}-{DateTime.Now.Year}-{DateTime.Now.Hour}-{DateTime.Now.Minute}.txt";
        // Créer le fichier vide =>
        _fileWrite.WriteFile(path, "");
        // Calculer le prix total de l'article choisi par le buyer =>
        float totalPrice = 0;
        foreach (var article in articles)
        {
            if (reference == article.Reference)
            {
                totalPrice = article.Price * quantity;
                LogAndConsole($"----\n[{newBuyer.Firstname}] added a {quantity} of {article.Reference} to his list\nwith a Total price = {totalPrice}\n----");
            }
        }
        _fileWrite.WriteFile(path, $" ----\nList of articles purchased :\n----\nReference : {newArticle.Reference}\nPrice : {newArticle.Price}\nQuantity : {quantity}\nTotal price : {totalPrice}\n----\n");
        _itemsPurchased.Add(new ItemPurchased(quantity, DateTime.Now));
        // Ecrire dans un fichier json =>
        string json = JsonSerializer.Serialize(_itemsPurchased);
        _fileWrite.WriteFile(_pathItemPurchasedJson, json);
    }
    
    public void AddArticle(Article article, Admin admin)
        {
            // Verify if the file exists =>
            if (!_fileExists.FileExists(_pathArticleJson))
                // Create the file =>
                _fileWrite.WriteFile(_pathArticleJson, "");
            // Create a new article =>
            Article newArticle = new Article(article.Reference, article.Price);
            // Read the current content of the file =>
            string? jsonFile = _fileRead.ReadFile(_pathArticleJson);
            // Deserialize the JSON file into a list of Article objects =>
            List<Article>? articles = new List<Article>();
            if (!string.IsNullOrWhiteSpace(jsonFile))
                articles = JsonSerializer.Deserialize<List<Article>>(jsonFile);
            // Add the new article to the list =>
            if (articles != null)
            {
                articles.Add(newArticle);
                // Serialize the list of articles into a JSON string =>
                string updatedJson = JsonSerializer.Serialize(articles);
                // Write the updated JSON string to the file =>
                _fileWrite.WriteFile(_pathArticleJson, updatedJson);
            }
            LogAndConsole($"----\n- {admin.Login} add an article ==> \n- Reference = {article.Reference} \n- Price = {article.Price}\n----");
            
            
            
            Article N°{items.ID}
            
            
                public void BuyerChooseAnArticleToList(Article newArticle, Buyer newBuyer, string reference, int quantity)
                {
                    // Read the current content of the file =>
                    string jsonFile = _fileRead.ReadFile(_pathArticleJson);
                    // Choisir un article de la liste =>
                    List<Article>? articles = JsonSerializer.Deserialize<List<Article>>(jsonFile);
                    // Sauvegarder le fichier =>
                    string path = $"/Users/thomas/Documents/RPI/2023-2025/DEV/Choco/ChocoModels/{newBuyer.Firstname}-{DateTime.Now.Day}-{DateTime.Now.Month}-{DateTime.Now.Year}-{DateTime.Now.Hour}-{DateTime.Now.Minute}.txt";
                    // Créer le fichier vide =>
                    _fileWrite.WriteFile(path, "");
                    // Calculer le prix total de l'article choisi par le buyer =>
                    float totalPrice = 0;
                    foreach (var article in articles)
                    {
                        if (reference == article.Reference)
                        {
                            totalPrice = article.Price * quantity;
                            LogAndConsole($"----\n[{newBuyer.Firstname}] added a {quantity} of {article.Reference} to his list\nwith a Total price = {totalPrice}\n----");
                        }
                    }
                    _fileWrite.WriteFile(path, $" ----\nList of articles purchased :\n----\nReference : {newArticle.Reference}\nPrice : {newArticle.Price}\nQuantity : {quantity}\nTotal price : {totalPrice}\n----\n");
                    // Appeler la fonction AddItemPurchased =>
                    AddItemPurchases(new ItemPurchased(quantity, DateTime.Now));
                }